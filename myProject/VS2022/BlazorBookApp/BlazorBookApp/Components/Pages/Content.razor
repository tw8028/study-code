@page "/content/{Title}"
@rendermode InteractiveServer
@inject IWebHostEnvironment Env

<style>
    .textContent {
        font-family: Arial, sans-serif;
        font-size: 20px;
        line-height: 1.5;
        width: 60%;
        margin: 0 auto;
        text-align: left;
    }
</style>

<h3>Content</h3>
@if (contents == null || contents.Length == 0)
{
    <p>Loading content...</p>
}

@foreach (string content in contents)
{
    <p class="textContent">
        @((MarkupString)content)<br/>
    </p>
}

@code {
    [Parameter] public string Title { get; set; }
    EpubBook[] books = [];
    private string[] contents = Array.Empty<string>();

    protected override async Task OnInitializedAsync()
    {
        string path = Path.Combine(Env.WebRootPath, "books");
        string[] files = Directory.GetFiles(path, "*.epub");
        books = files.Select(x => EpubReader.ReadBook(x)).ToArray();
        await Task.Delay(1000); // 等待一小段时间再刷新页面
        StateHasChanged(); //
    }

    protected override async Task OnParametersSetAsync()
    {
        EpubBook book = books.First(epubBook => epubBook.Title == Title);
        contents = book.ReadingOrder.Select(x => x.Content).ToArray();
        await Task.Delay(1000);
        StateHasChanged();
    }
}

