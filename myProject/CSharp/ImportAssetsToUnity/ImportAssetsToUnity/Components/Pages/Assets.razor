@page "/assets"
@page "/assets/{Category}"
@using ImportAssetsToUnity.AssetsImporter.Entities
@using ImportAssetsToUnity.AssetsImporter.Services
@using ImportAssetsToUnity.Components.Layout
@using ImportAssetsToUnity.Components.Pages.Template
@using ImportAssetsToUnity.Infrastructure
@layout CategoryMenu

<PageTitle>Assets</PageTitle>

<div class="btn-group-toggle" data-toggle="buttons">
    <label class="btn btn-secondary active">
        <input type="checkbox" checked="@IsShowAll" @onchange="OnChange"> All
    </label>
</div>
@if (ShowData.Count() != 0)
{
    <TddTable Data="@ShowData">
        <HeaderTemplate>
            <th>Name</th>
            <th>State</th>
            <th>Action</th>
        </HeaderTemplate>
        <RowTemplate>
            <td>@context.Name</td>
            <td>
                @if (context.State == CheckResult.Equal)
                {
                    <span class="alert-success">&#10003</span>
                }
                else
                {
                    <span class="alert-warning">@context.State</span>
                }
            </td>
        </RowTemplate>
        <Action Context="row">
            <td>
                <button class="btn btn-primary btn-sm" @onclick="()=>row.CopyTo()">copy to unity</button>
            </td>
        </Action>
    </TddTable>
}

@code {
    [Parameter] public string? Category { get; set; }
    IEnumerable<AssetInfo> Data { get; set; } = [];
    IEnumerable<AssetInfo> ShowData { get; set; } = [];
    bool IsShowAll { get; set; }

    protected override void OnParametersSet()
    {
        Data = GetAssets();
        IsShowAll = false;
        ShowData = Data.Where(x => x.State != CheckResult.Equal);
    }

    private IEnumerable<AssetInfo> GetAssets()
    {
        IAssetsType? item = AssetsFactory.Get().SingleOrDefault(asset => asset.GetName() == Category);
        return item != null ? item.GetAssetsInfo() : [];
    }

    private void OnChange()
    {
        IsShowAll = !IsShowAll;
        ShowData = IsShowAll ? Data : Data.Where(x => x.State != CheckResult.Equal); // show all
    }

}